# 部署python-demo仓库代码到开发环境
name: svn-python-demo-dev

on:
  workflow_dispatch:
    inputs:
      ref:
        description: '分支或标签(正式使用的时候不要给默认值)'
        default: 'svn-python-demo-2.0.0'
        required: true
        type: string

env:
  app_name: svn-python-demo-dev  # 设计为应用名，<仓库名>-<环境代号>
  deploy_path: /data/svn-python-demo/  # 部署路径：/data/<仓库名>
  deploy_user: aoemo  # 部署目录用户

jobs:
  build:
    name: 编译
    uses: ./.github/workflows/build_python_dev.yml
    secrets: inherit
    with:
      # 配置参数通过创建模板的api，动态生成
      app_name: svn-python-demo
      env: dev
      repository: 'svn://${{ secrets.SVN_SERVER }}/svn-python-demo'
      ref: ${{ inputs.ref }}
      repo_type: 'svn'

    # runs-on: ubuntu-latest
    # steps:
    #   - name: 打印变量
    #     run: |
    #       echo -e "\033[33mref: ${{ inputs.ref }}\nCODEUP_USER: ${{ secrets.CODEUP_USER }}\t CODEUP_PWD: ${{ secrets.CODEUP_PWD }}\033[0m"
    #   - name: 拉代码
    #     run: |
    #       mkdir svn-python-demo && cd svn-python-demo 
    #       svn checkout  --username ${{ secrets.SVN_USER }} --password ${{ secrets.SVN_PWD }} --no-auth-cache svn://${{ secrets.SVN_SERVER }}/svn-python-demo/tags/${{ inputs.ref }}
    #       cd ${{ inputs.ref }}
  
    #       echo -e "\033[33m以下是验证命令\n\033[0m"
    #       svn --username ${{ secrets.SVN_USER }} --password ${{ secrets.SVN_PWD }}  info && ls -atl
    
  deploy_before:
    name: 部署前置操作
    needs:
      - build
    uses: ./.github/workflows/deploy_dev.yml
    secrets: inherit
    with:
      # 配置参数通过创建模板的api，动态生成
      host_group:  svn-python-demo-dev
      # deploy_path: /data/svn-python-demo/
      # setup_cmd: 'bash setup.sh'
      # restart_cmd: 'bash restart.sh'
  
  deploy:
    # environment: prod  # 如果作业想设置人工审核，需要关联环境，并给环境配置保护规则
    name: 主机部署
    needs:
      - deploy_before
    runs-on: self-hosted
    strategy:
      # max-parallel: 2  # 并发控制
      matrix:
        host: ['172.31.94.47', '172.31.94.49']
    steps:
      - name: 执行部署脚本
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          REMOTE_HOST: ${{ matrix.host }}
          # REMOTE_PORT: 22
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SOURCE: ${{ github.WORKFLOW }}/svn-python-demo-dev.tgz
          TARGET: /tmp/app/
          # # Arguments to pass to rsync
          # ARGS: # optional, default is -rlgoDzvc -i
          SCRIPT_BEFORE: |
            echo -e "\033[36m我是部署前操作\033[0m"
            echo -e "\033[33m当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"
            [[ -d ${{ env.deploy_path }} ]] || mkdir -pv ${{ env.deploy_path }}
            cd ${{ env.deploy_path }} && rm -rf *
          SCRIPT_AFTER: |
            echo -e "\033[36m我是部署后操作\033[0m"
            echo -e "\033[33m当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"
            tar -zxvf /tmp/app/${{ env.app_name }}.tgz -C ${{ env.deploy_path }}
            chown -R ${{ env.deploy_user }}.${{ env.deploy_user }}  ${{ env.deploy_path }}
            pwd && ls -al ${{ env.deploy_path }}
            su -l aoemo -c "python3 ${{ env.deploy_path }}app.py"
            [[ -f setup.sh ]] && bash setup.sh
            [[ -f restart.sh ]] && bash restart.sh
      - name: 通知
        if: ${{ failure() }}
        env:
          ACTIONS_FEISHU_TAG: 'v1.3.1'
          INPUT_WEBHOOK: ${{ secrets.FS_ROBOT }}
          INPUT_MESSAGE_TYPE: "post"
          INPUT_TITLE: "Workflow 消息通知"
          # ${{ job.status }}
          INPUT_CONTENT: "流水线：${{ github.WORKFLOW }}\n仓库地址: ${{ inputs.github-server-url }}/${{ inputs.repository }}/tree/${{ inputs.ref }}\n发布环境：开发环境\n执行人：${{ github.ACTOR }}\n运行状态：失败"
        run: |
          wget -q https://github.com/xiachufang/actions-feishu/releases/download/${{ env.ACTIONS_FEISHU_TAG }}/linux-amd64-actions-feishu.tar.gz
          tar zxf linux-amd64-actions-feishu.tar.gz feishu
          ./feishu
  
  clean:
    name: 清理
    if: ${{ always() }}
    needs:
      - deploy
    runs-on: self-hosted
    steps:
      # 需要解决精确清理当前workflow，本次运行产生的内容
      - name: 清理运行器
        working-directory: ${{ github.workflow }}
        run: |
          pwd && ls -at1
          rm -rf ./*

  notification:
    name: 通知
    needs:
      - clean
    secrets: inherit
    uses: ./.github/workflows/notification.yml
    with:
      msg: "流水线：${{ github.WORKFLOW }}\n仓库地址: ${{ github.SERVER_URL }}/${{ github.repository }}/tree/${{ github.REF_NAME }}\n发布环境：开发环境\n执行人：${{ github.ACTOR }}\n运行状态：成功"
