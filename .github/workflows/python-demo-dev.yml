# 部署python-demo仓库代码到开发环境
name: python-demo-dev

on:
  workflow_dispatch:
    inputs:
      ref:
        description: '分支或标签(正式使用的时候不要给默认值)'
        default: 'main'
        required: true
        type: string

jobs:
  build:
    name: 编译作业
    runs-on: ubuntu-latest
    steps:
      - name: 创建action存放目录
        run: mkdir -v actions_temp
        
      - name: 拉取自定义的action
        uses: actions/checkout@v4.1.1
        with:
          path: 'actions_temp'
          
      # - name: 拷贝action文件
      #   run: |
      #     mv -f actions_temp/.github  ./
      #     rm -rf actions_temp
        
      - name: 拉代码
        # uses: ./.github/actions/action-checkout
        uses: ./actions_temp/.github/actions/action-checkout
        with:
          # 参数通过创建模板的api，动态生成
          repo_type: 'github'
          repository: 'deming-org/python-demo'
          ref: ${{ inputs.ref }}
          password: ${{ secrets.GH_TOKEN }}

      - name: 编译
        # uses: ./.github/actions/action-build
        uses: ./actions_temp/.github/actions/action-build
        with:
          # 参数通过创建模板的api，动态生成
          language_type: 'python'
          version: '3.9.13'
          # build_cmd: "echo -ne \"\033[33m 我是编译命令,Python版本：\033[0m\" && python -V"
          build_cmd: "echo -ne '我是编译命令,Python版本：'"
          
      - name: 单元测试
        # uses: ./.github/actions/action-unit-test
        uses: ./actions_temp/.github/actions/action-unit-test
        with:
          # 参数通过创建模板的api，动态生成
          dependency_cmd: "python -m pip install --upgrade pip; [[ -f requirements.txt ]] && pip install -r requirements.txt || echo '没有依赖文件'"
          test_cmd: 'python3 app.py'
        
      - name: 打包压缩
        run: |
          # 不能删除.github中的内容
          rm -rf .svn* .git .gitignore
          # <仓库名>-<环境代号>.tgz, 参数通过创建模板的api，动态生成
          tar -zcvf python-demo-dev.tgz *
          ls -l python-demo-dev.tgz && tar -tzvf python-demo-dev.tgz

      - name: 上传代码包
        uses: actions/upload-artifact@v4.0.0
        with:
          # <仓库名>-<环境代号>, 参数通过创建模板的api，动态生成
          name: python-demo-dev
          path: python-demo-dev.tgz
          
      - name: 作业失败通知
        if: ${{ failure() }}
        # uses: ./.github/actions/action-notification
        uses: ./actions_temp/.github/actions/action-notification
        with:
          channel_type: 'feishu'
          send_addr: ${{ secrets.FS_ROBOT }}
          # 参数通过创建模板的api，动态生成
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\n部署次数：${{ github.RUN_NUMBER }}\n发布环境：dev\n执行人：${{ github.ACTOR }}\n当前作业:${{ github.JOB }}\n运行状态：失败"
        
  deploy_before:
    name: 部署准备作业
    needs:
      - build
    runs-on: self-hosted
    steps:
      - name: 拉取自定义的action
        uses: actions/checkout@v4.1.1
        with:
          # 参数通过创建模板的api，动态生成
          path: ' python-demo-dev'
        # working-directory: py
        
      - name: 准备操作
        # 参数通过创建模板的api，动态生成
        uses: ./python-demo-dev/.github/actions/action-deploy-readiness
        with:
          # 参数通过创建模板的api，动态生成
          artifact_name:  python-demo-dev
          
      - name: 作业失败通知
        if: ${{ failure() }}
        # 参数通过创建模板的api，动态生成
        uses: ./python-demo-dev/.github/actions/action-notification
        with:
          channel_type: 'feishu'
          send_addr: ${{ secrets.FS_ROBOT }}
          # 参数通过创建模板的api，动态生成
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\n部署次数：${{ github.RUN_NUMBER }}\n发布环境：dev\n执行人：${{ github.ACTOR }}\n当前作业:${{ github.JOB }}\n运行状态：失败"
        
  deploy:
    # environment: prod  # 如果作业想设置人工审核，需要关联环境，并给环境配置保护规则
    name: 主机部署作业
    needs:
      - deploy_before
    runs-on: self-hosted
    env:
      app_name: python-demo-dev  # <仓库名>-<环境代号>
      deploy_path: /data/python-demo/  # 部署路径：/data/<仓库名>
      deploy_user: aoemo  # 部署目录用户
    strategy:
      # max-parallel: 2  # 并发控制
      matrix:
        # 参数通过创建模板的api，动态生成
        host: ['172.31.94.47', '172.31.94.49']
    steps:
      - name: 执行部署脚本
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          REMOTE_HOST: ${{ matrix.host }}
          # REMOTE_PORT: 22
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SOURCE: ${{ github.WORKFLOW }}/python-demo-dev.tgz
          TARGET: /tmp/app/
          # # Arguments to pass to rsync
          # ARGS: # optional, default is -rlgoDzvc -i
          SCRIPT_BEFORE: |
            echo -e "\033[36m我是部署前操作\033[0m"
            echo -e "\033[33m当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"
            
            [[ -d ${{ env.deploy_path }} ]] || mkdir -pv ${{ env.deploy_path }}
            cd ${{ env.deploy_path }} && rm -rf *
          SCRIPT_AFTER: |
            echo -e "\033[36m我是部署后操作\033[0m"
            echo -e "\033[33m当前主机ip：$(curl -m 3 -s ifconfig.me)\033[0m"
            
            tar -zxvf /tmp/app/${{ env.app_name }}.tgz -C ${{ env.deploy_path }}
            chown -R ${{ env.deploy_user }}.${{ env.deploy_user }}  ${{ env.deploy_path }}
            pwd && ls -al ${{ env.deploy_path }}
            su -l aoemo -c "python3 ${{ env.deploy_path }}app.py"
            [[ -f setup.sh ]] && bash setup.sh
            [[ -f restart.sh ]] && bash restart.sh

      - name: 作业失败通知
        if: ${{ failure() }}
        # uses: ./.github/actions/action-notification
        # 参数通过创建模板的api，动态生成
        uses: ./python-demo-dev/.github/actions/action-notification
        with:
          channel_type: 'feishu'
          send_addr: ${{ secrets.FS_ROBOT }}
          # 参数通过创建模板的api，动态生成
          content: "流水线：${{ github.WORKFLOW }}(${{ github.SERVER_URL }}/${{ github.REPOSITORY }}/actions/runs/${{ github.RUN_ID }})\n部署次数：${{ github.RUN_NUMBER }}\n发布环境：dev\n执行人：${{ github.ACTOR }}\n当前作业:${{ github.JOB }}\n运行状态：失败"

  round-off:
    name: 收尾作业
    if: ${{ !cancelled() }}
    needs:
      - deploy
    runs-on: self-hosted
    steps:
      # 需要解决精确清理当前workflow，本次运行产生的内容
      - name: 清理运行器
        run: |
          pwd && ls -at1 ${{ github.workflow }}
          cd ${{ github.workflow }} && rm -rf ./*
      - name: workflow结果通知
        if: ${{ !cancelled() }}
        # 参数通过创建模板的api，动态生成
        uses: ./python-demo-dev/.github/actions/action-notification
        with:
          channel_type: 'feishu'
          send_addr: ${{ secrets.FS_ROBOT }}
          # 参数通过创建模板的api，动态生成
          content: |
              流水线：${{ github.WORKFLOW }}
              部署次数：${{ github.RUN_NUMBER }}
              仓库地址: 动态生成
              发布环境：dev
              执行人：${{ github.ACTOR }}
              运行状态：成功"
        
